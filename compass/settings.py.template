"""
Django settings for compass project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*****'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'vm221-123.jinr.ru', '159.93.221.123']


# Application definition

INSTALLED_APPS = [
    'compass.apps.ProdSysConfig',
    'compass.apps.SchedConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'schedconfig.tools.sslAuth.SSLClientAuthMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'schedconfig.tools.sslAuth.SSLClientAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]

USER_DATA_FN = 'schedconfig.tools.userFromCertificate.user_dict_from_dn'

AUTOCREATE_VALID_SSL_USERS = True

LOGIN_URL = '/admin/'

LOGIN_REDIRECT_URL = '/compass-prodsys/admin/'

ROOT_URLCONF = 'compass.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'compass.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'localhost',
        'NAME': 'compass_prodsys',
        'USER': '*****',
        'PASSWORD': '*****',
    },
    'schedconfig': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '*****',
        'NAME': 'atlas_panda',
        'USER': '*****',
        'PASSWORD': '*****',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/srv/compass/static'

ADMIN_SITE_HEADER = "COMPASS ProdSys administration"

PANDA_URL = 'http://*****:980/server/panda'
PANDA_URL_SSL = 'https://*****:943/server/panda'
X509_USER_PROXY = '/tmp/x509up_u0'

PROXY_USER_ID = '*****'
PROXY_PASSWORD = '*****'

CELERY_RESULT_BACKEND = 'django-db'
CELERY_IMPORTS = ('prodsys.tasks')

COMPASS_HOST = '*****'
COMPASS_USER = '*****'
COMPASS_PASS = '*****'

LOGGING_DIR = '/var/log/compass_prodsys/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    # filters will define when a logger should run
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # format in which logs will be written
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
        'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
        'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    # handlers define the file to be written, which level to write in that file,
    # which format to use and which filter applies to that logger
    'handlers': {
        'debug_logfile': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'], # do not run debug logger in production
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024*1024*5, # 5MB
            'backupCount': 0,
            'filename': os.path.join(LOGGING_DIR, 'debug.log'),
            'formatter': 'verbose'
        },
        'error_logfile': {
            'level': 'ERROR',
            'filters': ['require_debug_false'], # run logger in production
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'error.log'),
            'formatter': 'verbose'
        },
        'periodic_tasks_logfile': {
            'level': 'INFO',
            'filters': ['require_debug_false'], # run logger in production
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024*1024*5, # 5MB
            'backupCount': 0,
            'filename': os.path.join(LOGGING_DIR, 'periodic_tasks.log'),
            'formatter': 'verbose'
        },
    },
    # here the handlers for the loggers and the level of each logger is defined
    'loggers': {
        'error_logger': {
            'handlers': ['error_logfile'],
            'level': 'ERROR'
         },
        'debug_logger': {
            'handlers': ['debug_logfile'],
            'level': 'DEBUG'
        },
        'periodic_tasks_logger': {
            'handlers': ['periodic_tasks_logfile'],
            'level': 'INFO'
        },
    }
}
